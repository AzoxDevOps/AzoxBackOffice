<header class="sticky-top">
    <div class="navbar navbar-expand-md navbar-dark bg-dark sticky-top">
        <div class="container-xl">
            <a class="navbar-brand" href="/admin">XQR</a>
            <button class="btn btn-dark" @onclick="SignOut">
                <span class="material-icons">power_settings_new</span>
            </button>
        </div>
    </div>
    @if (_sitemap != null)
    {
        <div class="navbar d-none d-md-flex topmenu">
            <div class="container-xl">
                <ul class="nav">
                    @foreach (var item in _sitemap.Items)
                    {
                        if (item.Items != null)
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">
                                    <span>@item.Name</span>
                                </a>
                                <ul class="dropdown-menu">
                                    @foreach (var innerItem in item.Items)
                                    {
                                        <li>
                                            <a class="nav-link" href="@innerItem.Url">
                                                <span>@innerItem.Name</span>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link" href="@item.Url">
                                    <span>@item.Name</span>
                                </a>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    }
</header>

@code {

    [Inject]
    ISitemapService SitemapService { get; set; }

    [Inject]
    AuthenticationStateProvider AuthStateProvider { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    private SitemapContext _sitemap;

    protected override async Task OnInitializedAsync()
    {
        _sitemap = await SitemapService.GetSitemapContext();
    }

    private async Task SignOut()
    {
        await ((IAuthService)AuthStateProvider).SignOut();
        NavigationManager.NavigateTo("/admin", true);
    }
}